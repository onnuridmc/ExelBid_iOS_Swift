#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef EXELBIDSDK_SWIFT_H
#define EXELBIDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ExelBidSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)



SWIFT_CLASS("_TtC10ExelBidSDK15EBAdPositioning")
@interface EBAdPositioning : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol EBAdViewDelegate;
@class NSString;
@class CLLocation;
@class NSCoder;

SWIFT_CLASS("_TtC10ExelBidSDK8EBAdView")
@interface EBAdView : UIView
/// The delegate (<code>EBAdViewDelegate</code>) of the ad view.
/// @warning <em>Important</em>: Before releasing an instance of <code>EBAdView</code>, you must set its delegate
/// property to <code>nil</code>.
@property (nonatomic, strong) id <EBAdViewDelegate> _Nullable delegate;
/// 광고보기에 대한 ExelBid 광고 ID입니다.
/// 광고 ID는 ExelBid 웹 사이트에서 생성됩니다. 광고 ID는 광고용으로 따로 설정 한 애플리케이션의 정의 된 배치입니다
@property (nonatomic, copy) NSString * _Nullable adUnitId;
/// 생년 월일 (ex:2016)
@property (nonatomic, copy) NSString * _Nullable yob;
/// 성별 (ex: M,F)
@property (nonatomic, copy) NSString * _Nullable gender;
/// 관련성이 더 높은 광고를 수신하기 위해 ExelBid 광고 서버로 전달되어야하는 키워드 세트를 나타내는 문자열입니다.
/// 키워드는 일반적으로 특정 사용자 세그먼트에서 광고 캠페인을 타겟팅하는 데 사용됩니다. 쉼표로 구분 된 키-값 쌍 형식이어야합니다 (e.g. “marital:single,age:24”).
/// ExelBid 웹 사이트의 키워드 타겟팅 옵션은 캠페인 관리시 “고급 타겟팅”섹션에서 찾을 수 있습니다.
@property (nonatomic, copy) NSString * _Nullable keywords;
/// 더 관련성 높은 광고를 수신하기 위해 ExelBid 광고 서버로 전달되어야하는 사용자의 위치를 나타내는<code>CLLocation</code> 개체입니다.
@property (nonatomic, strong) CLLocation * _Nullable location;
/// 광고보기가 테스트 모드에서 광고를 요청해야하는지 여부를 결정하는 Boolean 값입니다.
/// The default value is NO.
@property (nonatomic) BOOL testing;
/// Coppa (default : 0)
@property (nonatomic, copy) NSString * _Nullable coppa;
/// FullSizeWebView (default : NO)
@property (nonatomic) BOOL fullWebView;
/// 광고 ID와 배너 크기로 EBAdView를 초기화합니다.
/// @param adUnitId  ExelBid 광고 ID를 나타내는 문자열입니다.
/// @param size  원하는 광고 크기입니다.
/// @return 주어진 광고  ID 및 크기에 따라 새로 초기화 된 광고보기입니다.
- (nonnull instancetype)initWithAdUnitId:(NSString * _Nullable)adUnitId size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
/// ExelBid 광고 서버에서 새 광고를 요청합니다.
/// 광고보기가 이미 광고를로드중인 경우이 호출은 무시됩니다. 기존 광고 요청을 취소하고 새 광고를 강제로로드하려면<code>forceRefreshAd</code>를 사용할 수 있습니다.
- (void)loadAd;
/// ExelBid 광고를 중지 한다
/// 광고를 중지할때 호출 (리로드 타임이 중지 됩니다. 화면에서 나갈때 실행하면 됩니다.)
- (void)stopAd;
/// 기존 광고 요청을 취소하고 ExelBid 광고 서버에서 새 광고를 요청합니다.
- (void)forceRefreshAd;
/// 광고보기에 기기 방향이 변경되었음을 알립니다.
/// 일부 타사 광고 네트워크의 배너는 방향에 따라 작동합니다. 미디 에이션 된 광고가 새로운 방향을 인식하도록하려면 애플리케이션의 방향이 변경 될 때이 메서드를 호출해야합니다.
/// 조정 된 광고의 크기에 따라 애플리케이션 레이아웃을 변경해야하는 경우 방향 변경으로 인해 조정 된 광고의 크기가 조정되는 경우이 메소드를 호출 한 후 ‘adContentViewSize’값을 확인하는 것이 좋습니다.
/// @param newOrientation 새 인터페이스 방향 (방향 변경이 발생한 후).
- (void)rotateToOrientation:(UIInterfaceOrientation)newOrientation;
/// 타사 네이티브 광고 네트워크에서 모든 방향에 맞는 크기의 광고를 사용할 수 있습니다.
/// 이전에<code>lockNativeAdsToOrientation :</code>을 호출 한 적이 없으면이 메소드를 호출 할 필요가 없습니다.
/// @see lockNativeAdsToOrientation:
/// @see allowedNativeAdsOrientation
- (void)unlockNativeAdsOrientation;
/// 광고보기가 주기적으로 새 광고를로드하지 못하도록합니다.
/// 기본적으로 광고보기는 ExelBid 웹 사이트에서 새로 고침 간격이 구성된 경우 새 광고를 자동으로로드 할 수 있습니다.
/// 이 방법은 새로 고침 간격이 지정된 경우에도 새 광고가 자동으로로드되지 않도록합니다.
/// 가장 좋은 방법은 불필요한 광고 요청을 방지하기 위해 광고보기가 사용자에게 표시되지 않을 때마다이 메소드를 호출하는 것입니다.
/// 그런 다음<code>startAutomaticallyRefreshingContents</code>를 호출하여 광고보기가 표시 될 때 새로 고침 동작을 다시 사용하도록 설정할 수 있습니다.
/// @see startAutomaticallyRefreshingContents
- (void)stopAutomaticallyRefreshingContents;
/// ExelBid 웹 사이트의 사용자 정의 새로 고침 설정에 따라 광고보기가 주기적으로 새 광고를로드하도록합니다.
/// 이전에<code>stopAutomaticallyRefreshingContents</code>를 사용하여 광고보기의 새로 고침 동작을 중지 한 경우에만이 메서드를 호출해야합니다.
/// 기본적으로 광고보기는 ExelBid 웹 사이트에서 새로 고침 간격이 구성된 경우 새 광고를 자동으로로드 할 수 있습니다. 이 방법은 새로 고침 간격이 설정되지 않은 경우 효과가 없습니다.
/// @see stopAutomaticallyRefreshingContents
- (void)startAutomaticallyRefreshingContents;
@property (nonatomic, strong) UIView * _Nullable adContentView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



/// <code>EBAdView</code> 의 대리자는<code>EBAdViewDelegate</code> 프로토콜을 채택해야합니다.
/// 이 프로토콜의 선택적 메서드를 사용하면 대리인에게 배너 성공 또는 실패 및 기타 수명주기 이벤트를 알릴 수 있습니다.
SWIFT_PROTOCOL("_TtP10ExelBidSDK16EBAdViewDelegate_")
@protocol EBAdViewDelegate
@optional
/// 광고를 성공적으로로드하면 전송됩니다.
/// 아직 삽입하지 않은 경우이 메소드를 구현하여보기 계층 구조에 광고보기를 삽입해야합니다.
/// @param  광고뷰
- (void)adViewDidLoadAd:(EBAdView * _Nullable)view;
/// 광고로드에 실패 할 때 전송됩니다.
/// 빈 광고가 표시되지 않도록하려면이 메시지에 대한 응답으로 광고보기를 숨겨야합니다.
/// @param  광고뷰
- (void)adViewDidFailToLoadAd:(EBAdView * _Nullable)view;
/// 콘텐츠를로드하려고 할 때 전송됩니다.
/// 이 메서드는 사용자가 광고보기를 탭할 때 호출됩니다.
/// 이 메서드의 구현은 사용자 상호 작용이 필요한 모든 애플리케이션 활동을 일시 중지해야합니다.
/// @param 광고뷰
/// @see <code>didLoadViewForAd:</code>
- (void)willLoadViewForAd:(EBAdView * _Nullable)view;
/// 모달 콘텐츠를 닫았을 때 전송되어 애플리케이션에 제어권을 반환합니다.
/// 이 메소드의 구현은<code>willLoadViewForAd :</code>에 대한 응답으로 일시 중지 된 모든 애플리케이션 활동을 재개해야합니다.
/// @param view 광고뷰.
/// @see <code>willLoadViewForAd:</code>
- (void)didLoadViewForAd:(EBAdView * _Nullable)view;
/// 사용자가 광고를 탭하여 애플리케이션에서 나 가려고 할 때 전송됩니다.
/// 이 메서드가 호출 된 직후 애플리케이션이 백그라운드로 이동합니다.
/// @param view 광고뷰
- (void)willLeaveApplicationFromAd:(EBAdView * _Nullable)view;
@end

@protocol EBCollectionViewAdPlacerDelegate;
@class UICollectionView;
@class UIViewController;
@class EBNativeAdRendererConfiguration;
@class EBNativeAdRequestTargeting;

/// <code>EBCollectionViewAdPlacer</code> 클래스를 사용하면 ExelBid 광고 서버에서 네이티브 광고를 요청하고
/// <code>UICollectionView</code> 객체에 배치 할 수 있습니다.
/// 이 클래스의 인스턴스가 컬렉션 뷰로 초기화되면 광고를 삽입하고 일반 콘텐츠 셀의 위치를 조정하기 위해
/// 컬렉션 뷰의 데이터 소스와 위임을 래핑합니다.
SWIFT_CLASS("_TtC10ExelBidSDK24EBCollectionViewAdPlacer")
@interface EBCollectionViewAdPlacer : NSObject
@property (nonatomic, strong) id <EBCollectionViewAdPlacerDelegate> _Nullable delegate;
/// ExelBid 웹 사이트에서 동적으로 구성 할 수있는 위치에서 컬렉션뷰 보기에 광고를 삽입 할 광고 배치자를 만들고 반환합니다.
/// \code
/// *광고 요청을 할 때 광고 배치기는 테이블에 광고를 삽입해야하는 위치를 ExelBid 광고 서버에 요청합니다. ExelBid 웹 사이트에서 광고 단위의 설정을 수정하여 이러한 위치 값을 구성 할 수 있습니다.
///
/// *이 메소드를 사용하는 것은 + placerWithTableView : viewController : adPositioning : rendererConfigurations :를 호출하고`EBServerAdPositioning` 개체를`positioning` 매개 변수로 전달하는 것과 같습니다.
///
/// *@param tableView 광고를 삽입 할 테이블입니다.
/// *@param controller 콘텐츠를로드하는 데 사용해야하는 뷰 컨트롤러입니다.
/// *@param rendererConfigurations 네이티브 광고가 렌더링되는 방식을 제어하는 ​​EBNativeAdRendererConfiguration 개체의 배열입니다. 지정된 광고 단위에 표시 될 수있는 모든 광고 유형을 렌더링 할 수있는 구성을 전달해야합니다.
///
/// \endcode@return An <code>EBCollectionViewAdPlacer</code> object.
+ (EBCollectionViewAdPlacer * _Nonnull)placerWithCollectionView:(UICollectionView * _Nonnull)collectionView viewController:(UIViewController * _Nonnull)controller rendererConfigurations:(NSArray<EBNativeAdRendererConfiguration *> * _Nullable)rendererConfigurations SWIFT_WARN_UNUSED_RESULT;
/// 지정된 위치에서 컬렉션뷰에 광고를 삽입 할 광고 배치자를 만들고 반환합니다.
/// 이 방법을 사용할 때 컬렉션뷰 내에서 광고가 표시되는 위치를 제어하는 ​​두 가지 옵션이 있습니다.
/// 먼저, ‘EBServerAdPositioning’개체를 ‘positioning’매개 변수로 전달할 수 있습니다.
/// 이 매개 변수는 광고 배치 자에게 광고 서버에서 동적으로 위치 정보를 가져 오도록 지시하며,
/// 이는 ExelBid 웹 사이트에서 구성 할 수 있습니다. 대부분의 경우 애플리케이션을
/// 다시 빌드하지 않고도 위치를 수정할 수 있으므로 선호되는 접근 방식입니다. 편의 메서드를 호출하면
/// + placerWithTableView : viewController : defaultAdRenderingClass :이 작업도 수행합니다.
/// 또는 위치를 하드 코딩하려는 경우 대신<code>EBClientAdPositioning</code> 개체를 전달할 수 있습니다.
/// @param tableView 광고를 삽입 할 테이블입니다.
/// @param controller 콘텐츠를로드하는 데 사용해야하는 뷰 컨트롤러입니다.
/// @param positioning 스트림에서 광고가 표시되어야하는 위치를 지정하는 위치 지정 개체입니다.
/// @param rendererConfigurations 네이티브 광고가 렌더링되는 방식을 제어하는 ​​EBNativeAdRendererConfiguration 개체의 배열입니다.
/// 지정된 광고 단위에 표시 될 수있는 모든 광고 유형을 렌더링 할 수있는 구성을 전달해야합니다.
/// @return An <code>EBCollectionViewAdPlacer</code> object.
+ (EBCollectionViewAdPlacer * _Nonnull)placerWithCollectionView:(UICollectionView * _Nonnull)collectionView viewController:(UIViewController * _Nonnull)controller adPositioning:(EBAdPositioning * _Nonnull)positioning rendererConfigurations:(NSArray<EBNativeAdRendererConfiguration *> * _Nullable)rendererConfigurations SWIFT_WARN_UNUSED_RESULT;
/// 지정된 광고 단위 ID를 사용하여 ExelBid 광고 서버에서 광고를 요청합니다.
/// @param adUnitID 광고 ID입니다.
- (void)loadAdsForAdUnitID:(NSString * _Nullable)adUnitID;
/// 지정된 광고 단위 ID 및 타겟팅 매개 변수를 사용하여 ExelBid 광고 서버에서 광고를 요청합니다.
/// @param adUnitID  ExelBid ad unit ID.
/// @param targeting 지리적 위치 데이터와 같은 타겟팅 정보가 포함 된 개체입니다.
- (void)loadAdsForAdUnitID:(NSString * _Nullable)adUnitID targeting:(EBNativeAdRequestTargeting * _Nullable)targeting;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UICollectionViewLayout;
@class NSIndexPath;

@interface EBCollectionViewAdPlacer (SWIFT_EXTENSION(ExelBidSDK)) <UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@class UICollectionViewCell;

@interface EBCollectionViewAdPlacer (SWIFT_EXTENSION(ExelBidSDK)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface EBCollectionViewAdPlacer (SWIFT_EXTENSION(ExelBidSDK)) <UICollectionViewDelegate>
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView canPerformAction:(SEL _Nonnull)action forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath withSender:(id _Nullable)sender SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView performAction:(SEL _Nonnull)action forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath withSender:(id _Nullable)sender;
@end

@class EBStreamAdPlacer;

@interface EBCollectionViewAdPlacer (SWIFT_EXTENSION(ExelBidSDK))
- (void)adPlacer:(EBStreamAdPlacer * _Nonnull)adPlacer didLoadAdAtIndexPath:(NSIndexPath * _Nullable)indexPath;
- (void)adPlacer:(EBStreamAdPlacer * _Nonnull)adPlacer didRemoveAdsAtIndexPaths:(NSArray<NSIndexPath *> * _Nullable)indexPaths;
- (void)nativeAdWillLoadForStreamAdPlacer:(EBStreamAdPlacer * _Nullable)adPlacer;
- (void)nativeAdDidLoadForStreamAdPlacer:(EBStreamAdPlacer * _Nonnull)adPlacer;
- (void)nativeAdWillLeaveApplicationFromStreamAdPlacer:(EBStreamAdPlacer * _Nonnull)adPlacer;
@end


SWIFT_PROTOCOL("_TtP10ExelBidSDK32EBCollectionViewAdPlacerDelegate_")
@protocol EBCollectionViewAdPlacerDelegate
@optional
- (void)nativeAdWillLoadForCollectionViewAdPlacer:(EBCollectionViewAdPlacer * _Nonnull)placer;
- (void)nativeAdDidLoadForCollectionViewAdPlacer:(EBCollectionViewAdPlacer * _Nonnull)placer;
- (void)nativeAdWillLeaveApplicationFromCollectionViewAdPlacer:(EBCollectionViewAdPlacer * _Nonnull)placer;
@end

@protocol EBInterstitialAdControllerDelegate;
@class NSBundle;

SWIFT_CLASS("_TtC10ExelBidSDK26EBInterstitialAdController")
@interface EBInterstitialAdController : UIViewController
/// The delegate (<code>EBInterstitialAdControllerDelegate</code>) of the interstitial ad object.
@property (nonatomic, strong) id <EBInterstitialAdControllerDelegate> _Nullable delegate;
/// 이 전면 광고의 Exelbid 광고 ID입니다.
/// 광고 단위 ID는 Exelbid 웹 사이트에서 생성됩니다. 광고 단위는 광고용으로 따로 설정 한 애플리케이션의 정의 된 배치입니다. 광고 단위 ID가 설정되지 않은 경우 광고 개체는 테스트 광고 만 수신하는 기본 ID를 사용합니다.
@property (nonatomic, copy) NSString * _Nullable adUnitId;
/// 생년 월일 (ex:2016)
@property (nonatomic, copy) NSString * _Nullable yob;
/// 성별 (ex: M,F)
@property (nonatomic, copy) NSString * _Nullable gender;
/// 관련성이 더 높은 광고를 수신하기 위해 ExelBid 광고 서버로 전달되어야하는 키워드 세트를 나타내는 문자열입니다.
/// 키워드는 일반적으로 특정 사용자 세그먼트에서 광고 캠페인을 타겟팅하는 데 사용됩니다. 쉼표로 구분 된 키-값 쌍 형식이어야합니다 (e.g. “marital:single,age:24”).
/// ExelBid 웹 사이트의 키워드 타겟팅 옵션은 캠페인 관리시 “고급 타겟팅”섹션에서 찾을 수 있습니다.
@property (nonatomic, copy) NSString * _Nullable keywords;
/// 더 관련성 높은 광고를 수신하기 위해 ExelBid 광고 서버로 전달되어야하는 사용자의 위치를 나타내는<code>CLLocation</code> 개체입니다.
@property (nonatomic, strong) CLLocation * _Nullable location;
/// 광고보기가 테스트 모드에서 광고를 요청해야하는지 여부를 결정하는 Boolean 값입니다.
/// The default value is NO.
@property (nonatomic) BOOL testing;
/// Coppa (default : 0)
@property (nonatomic, copy) NSString * _Nullable coppa;
/// 전면 광고에 대한 광고 콘텐츠로드를 시작합니다.
/// 로드 성공 또는 실패 알림을 받으려면<code>EBInterstitialAdControllerDelegate</code>의<code>interstitialDidLoadAd :</code>및<code>interstitialDidFailToLoadAd :</code>메소드를 구현할 수 있습니다.
- (void)loadAd;
@property (nonatomic, readonly) BOOL ready;
/// 지정된 뷰 컨트롤러에서 모달로 전면 광고를 표시합니다.
/// 이 메소드는 삽입 광고가로드되지 않은 경우 아무 작업도 수행하지 않습니다 (즉, ‘ready’속성 값이 NO 임).
/// <code>EBInterstitialAdControllerDelegate</code>는 전면 광고가 화면을 차지하거나 포기할 때 알림을 받기 위해 구현할 수있는 선택적 메소드를 제공합니다.
/// @param controller 전면 광고를 표시하는 데 사용해야하는 뷰 컨트롤러입니다.
- (void)showFromViewController:(UIViewController * _Nullable)controller;
/// 응용 프로그램에서 사용할 수있는 삽입 광고의 공유 풀에서 지정된 삽입 광고 개체를 제거합니다.
/// @param controller The interstitial ad object that should be disposed.
- (void)removeSharedInterstitialAdController:(EBInterstitialAdController * _Nonnull)controller;
- (void)viewDidLoad;
- (nonnull instancetype)initWithAdUnitId:(NSString * _Nullable)adUnitId OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
+ (EBInterstitialAdController * _Nonnull)interstitialAdControllerForAdUnitId:(NSString * _Nullable)adUnitId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("이 함수는 더 이상 사용되지 않습니다. 대신 생성자 'EBInterstitialAdController(adUnitId: String?)'를 사용하세요.");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



/// The delegate of an <code>EBInterstitialAdController</code> object must adopt the
/// <code>EBInterstitialAdControllerDelegate</code> protocol.
/// 이 프로토콜의 선택적 메소드를 사용하면 광고가로드 된 때, 광고가 화면에서 표시되거나 닫힐 때, 광고가 만료 된 때와 같은 전면 광고 상태 변경에 대해 대리자가 알림을받을 수 있습니다.
SWIFT_PROTOCOL("_TtP10ExelBidSDK34EBInterstitialAdControllerDelegate_")
@protocol EBInterstitialAdControllerDelegate
@optional
/// 전면 광고를 성공적으로로드하면 전송됩니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidLoadAd:(EBInterstitialAdController * _Nullable)interstitial;
/// 광고를로드하지 못할 때 전송됩니다..
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidFailToLoadAd:(EBInterstitialAdController * _Nullable)interstitial;
/// 전면 광고가 화면에 표시되기 직전에 전송됩니다.
/// 이 메소드의 구현은 사용자 상호 작용이 필요한 모든 애플리케이션 활동을 일시 중지해야합니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialWillAppear:(EBInterstitialAdController * _Nullable)interstitial;
/// 전면 광고가 화면에 표시된 후에 전송됩니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidAppear:(EBInterstitialAdController * _Nullable)interstitial;
/// 전면 광고가 화면에 표시되지 못할때
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidFailToShow:(EBInterstitialAdController * _Nullable)interstitial;
/// 전면 광고가  화면에서 닫히기 직전에 전송됩니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialWillDisappear:(EBInterstitialAdController * _Nullable)interstitial;
/// 전면 광고가 화면에서 해제 된 후 전송되어 애플리케이션에 제어권이 반환됩니다.
/// 이 방법을 구현하면 전면 광고가 화면에 표시되기 전에 일시 중지 된 모든 애플리케이션 활동이 재개되어야합니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidDisappear:(EBInterstitialAdController * _Nullable)interstitial;
/// 로드 된 전면 광고를 더 이상 표시 할 수 없을 때 전송됩니다.
/// 특정 네트워크의 전면 광고는 콘텐츠가 현재 화면에 있더라도 언제든지 콘텐츠가 만료 될 수 있습니다. 이 메소드는 현재로드 된 전면 광고가 만료되어 더 이상 표시 할 수없는 경우 알려줍니다.
/// 광고가 만료 될 때 화면에 표시 되었다면이 메시지가 전송 될 때 이미 광고가 닫 혔을 것입니다.
/// 원하는 경우 새 광고를 가져 오는<code>loadAd</code> 호출이 구현에 포함될 수 있습니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidExpire:(EBInterstitialAdController * _Nullable)interstitial;
/// 사용자가 전면 광고를 탭하고 광고가 타겟 작업을 수행하려고 할 때 전송됩니다.
/// 이 작업에는 모달 표시 또는 애플리케이션 종료가 포함될 수 있습니다. 특정 광고 네트워크는 ‘탭된’콜백을 노출하지 않을 수 있으므로이 콜백에 의존하여 중요한 작업을 수행해서는 안됩니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidReceiveTapEvent:(EBInterstitialAdController * _Nullable)interstitial;
@end

@class EBMediationWrapper;

SWIFT_CLASS("_TtC10ExelBidSDK18EBMediationManager")
@interface EBMediationManager : NSObject
@property (nonatomic) BOOL testing;
- (nonnull instancetype)initWithAdUnitId:(NSString * _Nonnull)adUnitId mediationTypes:(NSArray<NSString *> * _Nonnull)mediationTypes OBJC_DESIGNATED_INITIALIZER;
- (void)requestMediationWithHandler:(void (^ _Nonnull)(EBMediationManager * _Nonnull, NSError * _Nullable))handler;
- (void)clear;
- (EBMediationWrapper * _Nullable)next SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isNext SWIFT_WARN_UNUSED_RESULT;
- (void)reset;
- (NSInteger)count SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10ExelBidSDK16EBMediationTypes")
@interface EBMediationTypes : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull exelbid;)
+ (NSString * _Nonnull)exelbid SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull admob;)
+ (NSString * _Nonnull)admob SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull facebook;)
+ (NSString * _Nonnull)facebook SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull adfit;)
+ (NSString * _Nonnull)adfit SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull digitalturbine;)
+ (NSString * _Nonnull)digitalturbine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pangle;)
+ (NSString * _Nonnull)pangle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull applovin;)
+ (NSString * _Nonnull)applovin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tnk;)
+ (NSString * _Nonnull)tnk SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull targetpick;)
+ (NSString * _Nonnull)targetpick SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mpartners;)
+ (NSString * _Nonnull)mpartners SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10ExelBidSDK18EBMediationWrapper")
@interface EBMediationWrapper : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) NSInteger index;
@property (nonatomic, readonly) NSInteger priority_rate;
@property (nonatomic, readonly, copy) NSString * _Nonnull unit_id;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol EBNativeAdDelegate;

/// <code>EBNativeAd</code> 클래스는 네이티브 광고에 대한 이벤트를 렌더링하고 관리하는 데 사용됩니다.
/// 이 클래스는 서버에서 반환 된 네이티브 광고 속성에 액세스하기위한 메서드와 URL 탐색 및
/// 메트릭 수집을위한 편리한 메서드를 제공합니다.
SWIFT_CLASS("_TtC10ExelBidSDK10EBNativeAd")
@interface EBNativeAd : NSObject
@property (nonatomic, strong) id <EBNativeAdDelegate> _Nullable delegate;
- (UIView * _Nullable)retrieveAdViewWithError:(NSError * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 네이티브 비디오 재생시 비디오 정지가 필요 할때 사용할수 있습니다.
/// *
- (void)stopNativeVideo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP10ExelBidSDK15EBVideoDelegate_")
@protocol EBVideoDelegate
@optional
/// 광고가 성공적으로로드 된 후에 호출됩니다.
/// @param adUnitID  이벤트와 관련된 광고의 ID입니다.
- (void)videoAdDidLoadWithAdUnitID:(NSString * _Nonnull)adUnitID;
/// 광고로드에 실패한 후에 호출됩니다.
/// @param adUnitID  이벤트와 관련된 광고의 ID입니다.
/// @param error 광고로드에 실패한 이유를 나타내는 오류입니다.
- (void)videoAdDidFailToLoadWithAdUnitID:(NSString * _Nonnull)adUnitID error:(NSError * _Nonnull)error;
/// 동영상 재생 시도가 실패 할 때 호출됩니다.
/// @param adUnitID  이벤트와 관련된 광고의 ID입니다.
/// @param error 동영상이 재생되지 않는 이유를 설명하는 오류입니다.
- (void)videoAdDidFailToPlayWithAdUnitID:(NSString * _Nonnull)adUnitID error:(NSError * _Nullable)error;
/// 광고가 표시 되려고 할 때 호출됩니다.
/// @param adUnitID  이벤트와 관련된 광고의 ID입니다.
- (void)videoAdWillAppearWithAdUnitID:(NSString * _Nonnull)adUnitID;
/// 동영상 광고가 표시 될 때 호출됩니다.
/// 상호 작용이 필요한 모든 애플리케이션 활동을 일시 중지해야합니다.
/// @param adUnitID  이벤트와 관련된 광고의 ID입니다.
- (void)videoAdDidAppearWithAdUnitID:(NSString * _Nonnull)adUnitID;
/// 동영상 광고가 닫힐 때 호출됩니다.
/// @param adUnitID  이벤트와 관련된 광고의 ID입니다.
- (void)videoAdWillDisappearWithAdUnitID:(NSString * _Nonnull)adUnitID;
/// 동영상 광고가 닫 혔을 때 호출됩니다.
/// 전면 광고가 화면에 표시되기 전에 일시 중지 된 모든 애플리케이션 활동을 재개해야합니다.
/// @param adUnitID  이벤트와 관련된 광고의 ID입니다.
- (void)videoAdDidDisappearWithAdUnitID:(NSString * _Nonnull)adUnitID;
/// 사용자가 광고를 탭할 때 호출됩니다.
/// @param adUnitID  이벤트와 관련된 광고의 ID입니다.
- (void)videoAdDidReceiveTapEventWithAdUnitID:(NSString * _Nonnull)adUnitID;
@end


@interface EBNativeAd (SWIFT_EXTENSION(ExelBidSDK)) <EBVideoDelegate>
- (void)videoAdDidReceiveTapEventWithAdUnitID:(NSString * _Nonnull)adUnitID;
@end





SWIFT_PROTOCOL("_TtP10ExelBidSDK18EBNativeAdDelegate_")
@protocol EBNativeAdDelegate
@optional
/// 네이티브 광고가 모달 콘텐츠를 표시 할 때 전송됩니다.
/// @param nativeAd 메시지를 보내는 네이티브 광고입니다.
- (void)willLoadForNativeAd:(EBNativeAd * _Nullable)nativeAd;
/// 네이티브 광고가 모달 콘텐츠를 닫았을 때 전송되어 애플리케이션에 제어권을 반환합니다.
/// @param nativeAd 메시지를 보내는 네이티브 광고입니다.
- (void)didLoadForNativeAd:(EBNativeAd * _Nullable)nativeAd;
/// 사용자가이 기본 광고를 탭한 결과로 애플리케이션에서 나 가려고 할 때 전송됩니다.
/// @param nativeAd 메시지를 보내는 네이티브 광고입니다.
- (void)willLeaveApplicationFromNativeAd:(EBNativeAd * _Nullable)nativeAd;
/// 광고를 탭할 때 나타날 수있는 인앱 브라우저와 같은 모달 콘텐츠를 표시하는 데 사용할 뷰 컨트롤러를 대리인에게 요청합니다.
/// @return 모달 콘텐츠를 표시하는 데 사용해야하는 뷰 컨트롤러입니다.
- (UIViewController * _Nullable)viewControllerForPresentingModalView SWIFT_WARN_UNUSED_RESULT;
@end

@protocol EBNativeAdRendererSettings;

SWIFT_CLASS("_TtC10ExelBidSDK31EBNativeAdRendererConfiguration")
@interface EBNativeAdRendererConfiguration : NSObject
@property (nonatomic, strong) id <EBNativeAdRendererSettings> _Nullable rendererSettings;
@property (nonatomic) id _Nullable rendererClass;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable supportedCustomEvents;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP10ExelBidSDK26EBNativeAdRendererSettings_")
@protocol EBNativeAdRendererSettings
@optional
/// viewSizeHandler는 광고 배치 솔루션을 사용하면 앱이 최대 너비를 지정하고 네이티브 광고보기 크기를 구성 할 수 있도록하는 데 사용됩니다.
/// 앱이 네이티브 광고를 수동으로 통합하는 경우,이 호출되지 않습니다.
/// 렌더러 설정 개체는 구성 가능한 viewSizeHandler 속성을 노출하여 응용 프로그램이 광고 뷰의 크기를 어떻게 설정할지 여부를 선택할 수 있도록해야합니다.
/// 렌더러는 설정 객체에서 뷰 크기 처리기를 사용할 수있게됩니다.
@property (nonatomic, copy) CGSize (^ _Nullable viewSizeHandler)(CGFloat);
@end

@class UILabel;
@class UIImageView;

/// EBNativeAdRendering 프로토콜은 맞춤보기 클래스에 광고 콘텐츠를 표시하는 방법을 제공합니다.
/// 정적 네이티브 광고와 네이티브 동영상 광고 모두에 사용할 수 있습니다.
/// 네이티브 동영상 광고를 게재하는 경우 nativeVideoView를 구현해야합니다.
SWIFT_PROTOCOL("_TtP10ExelBidSDK19EBNativeAdRendering_")
@protocol EBNativeAdRendering
@optional
/// 메인 텍스트에 사용하고있는 UILabel을 반환합니다.
/// @return 본문에 사용되는 UILabel
- (UILabel * _Nullable)nativeMainTextLabel SWIFT_WARN_UNUSED_RESULT;
/// 제목 텍스트에 사용중인 UILabel을 반환합니다.
/// @return 제목 텍스트에 사용되는 UILabel
- (UILabel * _Nullable)nativeTitleTextLabel SWIFT_WARN_UNUSED_RESULT;
/// 아이콘 이미지에 사용중인 UIImageView를 반환합니다.
/// @return 아이콘 이미지에 사용되는 UIImageView.
- (UIImageView * _Nullable)nativeIconImageView SWIFT_WARN_UNUSED_RESULT;
/// 메인 이미지에 사용중인 UIImageView를 반환합니다.
/// @return 메인 이미지에 사용되는 UIImageView
- (UIImageView * _Nullable)nativeMainImageView SWIFT_WARN_UNUSED_RESULT;
/// 비디오에 사용하는 UIView를 반환합니다.
/// 동영상 광고를 게재 할 때만이를 구현하면됩니다.
/// @return 동영상을 보관하는 데 사용되는 UIView
- (UIView * _Nullable)nativeVideoView SWIFT_WARN_UNUSED_RESULT;
/// *클릭 유도 문안 (cta) 텍스트에 사용중인 UILabel을 반환합니다.
/// *
/// <ul>
///   <li>
///     @return cta 텍스트에 사용되는 UILabel
///   </li>
/// </ul>
- (UILabel * _Nullable)nativeCallToActionTextLabel SWIFT_WARN_UNUSED_RESULT;
/// 개인 정보 아이콘에 대해 뷰가 사용중인 UIImageView를 반환합니다.
/// @return개인 정보 아이콘에 사용되는 UIImageView
- (UIImageView * _Nullable)nativePrivacyInformationIconImageView SWIFT_WARN_UNUSED_RESULT;
@end


/// *<code>EBNativeAdRequest</code> 클래스는 기본 광고 ExelBid 광고 서버에 대한 개별 요청을 관리하는 데 사용됩니다.
/// *
/// <ul>
///   <li>
///     @warning <em>Note:</em> 이 클래스는 기본 광고의 응답을 수동으로 처리하려는 일회성 요청을 대상으로하고 있습니다.
///   </li>
///   <li>
///     <code>EBTableViewAdPlacer</code> 또는<code>EBCollectionViewAdPlacer</code>를 사용하여 광고를 표시하는 경우는이 클래스를 사용할 필요가 없습니다.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10ExelBidSDK17EBNativeAdRequest")
@interface EBNativeAdRequest : NSObject
/// 관련성 높은 광고를 제공하기 위해 ExelBid 광고 서버에 전달할 수있는 타겟팅 매개 변수를 나타내는 개체입니다.
@property (nonatomic, strong) EBNativeAdRequestTargeting * _Nullable targeting;
/// 요청 객체를 초기화합니다.
/// @param identifier이 요청 광고 단위 식별자. 광고 단위는 광고에 확보 된 응용 프로그램에서 정의 된 배치입니다. 광고 단위 ID는 ExelBidWeb 사이트에서 생성됩니다.
/// @param rendererConfigurations 네이티브 광고를 렌더링하는 방법을 제어하는 EBNativeAdRendererConfiguration 객체의 배열.
/// @return An <code>EBNativeAdRequest</code> object.
+ (EBNativeAdRequest * _Nonnull)requestWithAdUnitIdentifier:(NSString * _Nullable)identifier rendererConfigurations:(NSArray<EBNativeAdRendererConfiguration *> * _Nullable)rendererConfigurations SWIFT_WARN_UNUSED_RESULT;
/// ExelBid 광고 서버에 대한 요청을 실행합니다.
/// @param handler 요청이 완료되면 실행할 블록. 블록에 매개 변수로 요청 자체와 실패의 유효한 EBNativeAd 또는 NSError 객체 중 하나가 포함됩니다.
- (void)startWithCompletionHandler:(void (^ _Nullable)(EBNativeAdRequest * _Nullable, EBNativeAd * _Nullable, NSError * _Nullable))handler;
- (void)startMPartnersWithCompletionHandler:(void (^ _Nullable)(EBNativeAdRequest * _Nullable, EBNativeAd * _Nullable, NSError * _Nullable))handler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSSet;

/// <code>EBNativeAdRequestTargeting</code> 클래스는 타겟팅 정보를<code>EBNativeAdRequest</code> 개체에 첨부하는 데 사용됩니다.
SWIFT_CLASS("_TtC10ExelBidSDK26EBNativeAdRequestTargeting")
@interface EBNativeAdRequestTargeting : NSObject
/// EBNativeAdRequestTargeting 개체를 만들고 반환합니다.
/// @return A newly initialized EBNativeAdRequestTargeting object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) EBNativeAdRequestTargeting * _Nonnull targeting;)
+ (EBNativeAdRequestTargeting * _Nonnull)targeting SWIFT_WARN_UNUSED_RESULT;
+ (void)setTargeting:(EBNativeAdRequestTargeting * _Nonnull)value;
/// 관련성이 더 높은 광고를 수신하기 위해 ExelBid 광고 서버로 전달되어야하는 키워드 세트를 나타내는 문자열입니다.
/// 키워드는 일반적으로 특정 사용자 세그먼트에서 광고 캠페인을 타겟팅하는 데 사용됩니다. 쉼표로 구분 된 키-값 쌍 형식이어야합니다 (e.g. “marital:single,age:24”).
/// ExelBid 웹 사이트의 키워드 타겟팅 옵션은 캠페인 관리시 “고급 타겟팅”섹션에서 찾을 수 있습니다.
@property (nonatomic, copy) NSString * _Nullable keywords;
/// 더 관련성 높은 광고를 수신하기 위해 ExelBid 광고 서버로 전달되어야하는 사용자의 위치를 나타내는<code>CLLocation</code> 개체입니다.
@property (nonatomic, strong) CLLocation * _Nullable location;
@property (nonatomic, strong) NSSet * _Nullable desiredAssets;
/// 생년 월일 (ex:2016)
@property (nonatomic, copy) NSString * _Nullable yob;
/// 성별 (ex: M,F)
@property (nonatomic, copy) NSString * _Nullable gender;
/// 광고보기가 테스트 모드에서 광고를 요청해야하는지 여부를 결정하는 Boolean 값입니다.
/// The default value is NO.
@property (nonatomic) BOOL testing;
/// Coppa (default : 0)
@property (nonatomic, copy) NSString * _Nullable coppa;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10ExelBidSDK13EBNativeAsset")
@interface EBNativeAsset : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdTitleKey;)
+ (NSString * _Nonnull)kAdTitleKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdTextKey;)
+ (NSString * _Nonnull)kAdTextKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdIconImageKey;)
+ (NSString * _Nonnull)kAdIconImageKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdMainImageKey;)
+ (NSString * _Nonnull)kAdMainImageKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdLogoeKey;)
+ (NSString * _Nonnull)kAdLogoeKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdSponsoredKey;)
+ (NSString * _Nonnull)kAdSponsoredKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdStarRatingKey;)
+ (NSString * _Nonnull)kAdStarRatingKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdLikesKey;)
+ (NSString * _Nonnull)kAdLikesKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdDownloadsKey;)
+ (NSString * _Nonnull)kAdDownloadsKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdPriceKey;)
+ (NSString * _Nonnull)kAdPriceKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdSalepriceKey;)
+ (NSString * _Nonnull)kAdSalepriceKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdPhoneKey;)
+ (NSString * _Nonnull)kAdPhoneKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdAddressKey;)
+ (NSString * _Nonnull)kAdAddressKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdDesc2Key;)
+ (NSString * _Nonnull)kAdDesc2Key SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdDisplayurlKey;)
+ (NSString * _Nonnull)kAdDisplayurlKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdCTATextKey;)
+ (NSString * _Nonnull)kAdCTATextKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kAdVideo;)
+ (NSString * _Nonnull)kAdVideo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10ExelBidSDK24EBStaticNativeAdRenderer")
@interface EBStaticNativeAdRenderer : NSObject
+ (EBNativeAdRendererConfiguration * _Nonnull)rendererConfigurationWithRendererSettings:(id <EBNativeAdRendererSettings> _Nonnull)rendererSettings SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC10ExelBidSDK32EBStaticNativeAdRendererSettings")
@interface EBStaticNativeAdRendererSettings : NSObject <EBNativeAdRendererSettings>
/// EBNativeAdRendering 프로토콜을 구현하는 UIView 여야하는 렌더링 클래스입니다.
/// 광고는이 클래스로 렌더링됩니다.
@property (nonatomic) Class _Nullable renderingViewClass;
/// 최대 너비가 주어진 경우 뷰의 크기를 반환하는 블록입니다.
/// 이는 광고 클래스와 함께 사용할 때 설정해야 광고 위치가 광고를 포함하는 셀의 크기를 올바르게 조정할 수 있습니다.
/// viewSizeHandler는 수동 네이티브 광고 통합에 사용되지 않습니다. 수동으로 통합 된 네이티브 광고보기의 프레임을 설정해야합니다.
@property (nonatomic, copy) CGSize (^ _Nullable viewSizeHandler)(CGFloat);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSIndexSet;

/// <code>EBStreamAdPlacer</code> 클래스를 사용하면 ExelBid 광고 서버에서
/// 네이티브 광고를 검색하여 콘텐츠 스트림을 나타내는 맞춤 UI 구성 요소에 배치 할 수 있습니다.
/// 실제로 자체적으로 광고를 표시하거나 삽입하지 않습니다.
/// 광고 삽입을 처리하려면<code>EBStreamAdPlacerDelegate</code> 프로토콜을 준수하는 대리자를 제공해야합니다.
/// @warning ** 참고 : **<code>UITableView</code> 또는<code>UICollectionView</code>에 광고를 삽입하는 경우
/// 이 클래스를 사용하기 전에 먼저<code>UITableViewAdPlacer</code> 또는<code>UICollectionViewAdPlacer</code>
/// 클래스가 사용 사례에 충분한 지 고려해야합니다. .
/// @discussion 스트림 광고 배치를 만들 때 앱의 첫 번째 책임은 스트림 상태를 전달하는 것입니다.
/// 특히 -setItemCount : forSection :을 사용하여 스트림의 원본 콘텐츠 항목 수를 제공해야
/// 광고가 표시 될 위치와 수를 결정할 수 있습니다. 또한 콘텐츠 항목 또는 섹션의 삽입, 삭제 또는 재 배열을 광고 배치 자에게 알려야합니다.
/// -loadAdsForAdUnitID : 메소드를 사용하여 스트림 광고 배치기에 광고 검색을 시작하도록 지시합니다.
/// 성능을 최적화하기 위해이 호출로 인해 광고 배치자가 대리인에게 광고 삽입을 요청하지 않을 수 있습니다.
/// 대신 광고 배치자는 현재 표시되는 콘텐츠 항목을 결정하여 광고 삽입 여부를 결정합니다.
/// 이는 델리게이트가 새로운 삽입에 대해 간헐적으로 알림을받을 수 있음을 의미하며,
/// 가시성이 낮은 스트림의 위치에 대해 광고가 요청되는 상황을 최소화하기위한 것입니다.
/// <h3>삽입 및 렌더링 광고에 응답</h3>
/// 대리인은 지정된 색인 경로에서 원본 콘텐츠 항목이 아닌 광고를 렌더링하는 것을 알 수 있도록
/// 스트림의 데이터 소스를 업데이트하여 삽입 콜백에 응답해야합니다.
/// 구현은 데이터 소스의 디자인에 따라 다를 수 있습니다.
/// -renderAdAtIndexPath : inView :를 사용하여보기를 광고 콘텐츠로 채 웁니다.
SWIFT_CLASS("_TtC10ExelBidSDK16EBStreamAdPlacer")
@interface EBStreamAdPlacer : NSObject
/// 섹션에 몇 개의 항목이 있는지 광고 배치 자에게 알립니다.
/// 이를 통해 광고 배치자는 가시 범위 주변에 더 효과적으로 광고를 배치 할 수 있습니다.
/// @param count 섹션에있는 항목 수입니다.
/// @param 섹션 광고 배치자가 카운트를 기록하는 섹션입니다.
- (void)setItemCount:(NSInteger)count forSection:(NSInteger)section;
/// 해당 렌더링 클래스를 사용하여 뷰에서 콘텐츠를 렌더링합니다.
/// @param indexPath 렌더링하려는 셀의 인덱스 경로입니다.
/// @param보기 콘텐츠를 렌더링하려는보기입니다.
- (void)renderAdAtIndexPath:(NSIndexPath * _Nonnull)indexPath inView:(UIView * _Nonnull)view;
/// 지정된 광고 단위 ID를 사용하여 ExelBid 광고 서버에서 광고를 요청합니다.
/// @param adUnitID ExelBid 광고 단위 ID를 나타내는 문자열입니다.
- (void)loadAdsForAdUnitID:(NSString * _Nullable)adUnitID;
/// 지정된 광고 단위 ID 및 타겟팅 매개 변수를 사용하여 ExelBid 광고 서버에서 광고를 요청합니다.
/// @param adUnitID ExelBid 광고 단위 ID를 나타내는 문자열입니다.
/// @param 타겟팅 지리적 위치 데이터와 같은 타겟팅 정보가 포함 된 개체입니다.
- (void)loadAdsForAdUnitID:(NSString * _Nullable)adUnitID targeting:(EBNativeAdRequestTargeting * _Nullable)targeting;
/// indexPath에 광고를 표시 할 준비가되었는지 여부를 반환합니다.
/// @param indexPath 광고 준비 상태를 검사 할 색인 경로입니다.
- (BOOL)isAdAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// 삽입 된 광고를 포함하여 스트림의 특정 섹션에있는 항목 수를 반환합니다.
/// @param numberOfItems 콘텐츠 항목 수입니다.
/// @param 섹션 메서드가 조정 된 항목 수를 검색 할 섹션입니다.
- (NSInteger)adjustedNumberOfItems:(NSInteger)numberOfItems inSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// 스트림에 삽입 된 광고를 고려한 후 항목의 위치를 나타내는 색인 경로를 반환합니다.
/// @param indexPath 광고가 스트림에 삽입되기 전에 콘텐츠 항목의 원래 위치를 식별하는 색인 경로 개체입니다.
- (NSIndexPath * _Nullable)adjustedIndexPathForOriginalIndexPath:(NSIndexPath * _Nullable)indexPath SWIFT_WARN_UNUSED_RESULT;
/// 광고가 삽입 된 후 스트림에서의 위치를 고려하여 콘텐츠 항목의 원래 위치를 요청합니다.
/// 지정된 색인 경로가 콘텐츠 항목이 아니라 광고를 식별하는 경우이 메소드는 nil을 반환합니다.
/// @param indexPath 광고가 삽입 된 후 스트림의 항목을 식별하는 색인 경로 개체입니다.
- (NSIndexPath * _Nullable)originalIndexPathForAdjustedIndexPath:(NSIndexPath * _Nullable)indexPath SWIFT_WARN_UNUSED_RESULT;
/// 스트림에 삽입 된 광고를 고려한 후 항목의 위치를 나타내는 색인 경로를 반환합니다.
/// @param indexPaths 광고가 스트림에 삽입되기 전에 콘텐츠 항목의 원래 위치를 각각 식별하는 색인 경로 개체의 배열입니다.
- (NSArray<NSIndexPath *> * _Nullable)adjustedIndexPathsForOriginalIndexPaths:(NSArray<NSIndexPath *> * _Nullable)indexPaths SWIFT_WARN_UNUSED_RESULT;
/// 광고가 삽입 된 후 스트림에서의 위치를 고려하여 콘텐츠 항목의 원래 위치를 검색합니다.
/// 지정된 색인 경로가 콘텐츠 항목을 식별하지 않고 광고를 식별하는 경우 결과에 포함되지 않습니다.
/// @param indexPaths 광고가 삽입 된 후 스트림에서 항목을 각각 식별하는 인덱스 경로 개체의 배열입니다.
- (NSArray<NSIndexPath *> * _Nullable)originalIndexPathsForAdjustedIndexPaths:(NSArray<NSIndexPath *> * _Nullable)indexPaths SWIFT_WARN_UNUSED_RESULT;
/// 콘텐츠 항목이 지정된 인덱스 경로에 삽입되었음을 광고 배치 자에게 알립니다.
/// 이 방법을 사용하면 광고 배치자가 광고 위치를 올바르게 조정할 수 있습니다.
/// @param originalIndexPaths 콘텐츠가 삽입 된 위치를 식별하는 NSIndexPath 개체의 배열입니다.
- (void)insertItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nullable)originalIndexPaths;
/// 지정된 색인 경로에서 콘텐츠 항목이 삭제되었음을 광고 배치 자에게 알립니다.
/// 이 방법을 사용하면 광고 배치자가 광고 위치를 올바르게 조정하고 필요한 경우 스트림에서 제거 할 수 있습니다.
/// @param originalIndexPaths 콘텐츠가 삭제 된 위치를 식별하는 NSIndexPath 개체의 배열입니다.
- (void)deleteItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nullable)originalIndexPaths;
/// 콘텐츠 항목이 한 색인 경로에서 다른 색인 경로로 이동했음을 광고 배치 자에게 알립니다.
/// 이 방법을 사용하면 광고 배치자가 광고 위치를 올바르게 조정할 수 있습니다.
/// @param fromIndexPath 항목의 원래 위치를 식별하는 색인 경로입니다.
/// @param toIndexPath 항목의 대상 인덱스 경로입니다.
- (void)moveItemAtIndexPath:(NSIndexPath * _Nonnull)fromIndexPath toIndexPath:(NSIndexPath * _Nonnull)toIndexPath;
/// 지정된 인덱스에 섹션이 삽입되었음을 광고 배치 자에게 알립니다.
/// 이 방법을 사용하면 광고 배치자가 광고 위치를 올바르게 조정할 수 있습니다.
/// @param 섹션 섹션이 삽입 된 위치를 식별하는 NSIndexSet입니다.
- (void)insertSections:(NSIndexSet * _Nonnull)sections;
/// 지정된 인덱스에서 섹션이 삭제되었음을 광고 배치 자에게 알립니다.
/// 이 방법을 사용하면 광고 배치자가 광고 위치를 올바르게 조정할 수 있습니다.
/// @param 섹션 섹션이 삭제 된 위치를 식별하는 NSIndexSet입니다.
- (void)deleteSections:(NSIndexSet * _Nonnull)sections;
/// 섹션이 한 색인에서 다른 색인으로 이동했음을 광고 배치 자에게 알립니다.
/// 이 방법을 사용하면 광고 배치자가 광고 위치를 올바르게 조정할 수 있습니다.
/// @param 섹션 섹션의 원래 위치를 식별하는 색인입니다.
/// @param newSection 섹션의 대상 색인입니다.
- (void)moveSection:(NSInteger)section toSection:(NSInteger)newSection;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface EBStreamAdPlacer (SWIFT_EXTENSION(ExelBidSDK)) <EBNativeAdDelegate>
- (void)willLoadForNativeAd:(EBNativeAd * _Nullable)nativeAd;
- (void)didLoadForNativeAd:(EBNativeAd * _Nullable)nativeAd;
- (void)willLeaveApplicationFromNativeAd:(EBNativeAd * _Nullable)nativeAd;
- (UIViewController * _Nullable)viewControllerForPresentingModalView SWIFT_WARN_UNUSED_RESULT;
@end



@protocol EBTableViewAdPlacerDelegate;
@class UITableView;

/// <code>EBTableViewAdPlacer</code> 클래스를 사용하면 ExelBid 광고 서버에서 네이티브 광고를 요청하여
/// <code>UITableView</code> 개체에 배치 할 수 있습니다.
/// 이 클래스의 인스턴스가 테이블로 초기화되면 광고를 삽입하고 일반 콘텐츠 셀의 위치를
/// 조정하기 위해 테이블의 데이터 소스와 위임을 래핑합니다.
SWIFT_CLASS("_TtC10ExelBidSDK19EBTableViewAdPlacer")
@interface EBTableViewAdPlacer : NSObject
@property (nonatomic, strong) id <EBTableViewAdPlacerDelegate> _Nullable delegate;
/// ExelBid 웹 사이트에서 동적으로 구성 할 수있는 위치에서 테이블에 광고를 삽입 할 광고 배치자를 만들고 반환합니다.
/// \code
///  *광고 요청을 할 때 광고 배치기는 테이블에 광고를 삽입해야하는 위치를 ExelBid 광고 서버에 요청합니다. ExelBid 웹 사이트에서 광고 단위의 설정을 수정하여 이러한 위치 값을 구성 할 수 있습니다.
///
///  *이 메소드를 사용하는 것은 + placerWithTableView : viewController : adPositioning : rendererConfigurations :를 호출하고`EBServerAdPositioning` 개체를`positioning` 매개 변수로 전달하는 것과 같습니다.
///
///  *@param tableView 광고를 삽입 할 테이블입니다.
///  *@param controller 콘텐츠를로드하는 데 사용해야하는 뷰 컨트롤러입니다.
///  *@param rendererConfigurations 네이티브 광고가 렌더링되는 방식을 제어하는 ​​EBNativeAdRendererConfiguration 개체의 배열입니다. 지정된 광고 단위에 표시 될 수있는 모든 광고 유형을 렌더링 할 수있는 구성을 전달해야합니다.
///
///  *@return`EBTableViewAdPlacer` 개체입니다.
///
/// \endcode
+ (EBTableViewAdPlacer * _Nonnull)placerWithTableView:(UITableView * _Nullable)tableView viewController:(UIViewController * _Nullable)controller rendererConfigurations:(NSArray<EBNativeAdRendererConfiguration *> * _Nullable)rendererConfigurations SWIFT_WARN_UNUSED_RESULT;
/// 지정된 위치에서 테이블뷰에 광고를 삽입 할 광고 배치자를 만들고 반환합니다.
/// 이 방법을 사용할 때 테이블뷰 내에서 광고가 표시되는 위치를 제어하는 ​​두 가지 옵션이 있습니다.
/// 먼저, ‘EBServerAdPositioning’개체를 ‘positioning’매개 변수로 전달할 수 있습니다.
/// 이 매개 변수는 광고 배치 자에게 광고 서버에서 동적으로 위치 정보를 가져 오도록 지시하며,
/// 이는 ExelBid 웹 사이트에서 구성 할 수 있습니다. 대부분의 경우 애플리케이션을
/// 다시 빌드하지 않고도 위치를 수정할 수 있으므로 선호되는 접근 방식입니다. 편의 메서드를 호출하면
/// + placerWithTableView : viewController : defaultAdRenderingClass :이 작업도 수행합니다.
/// 또는 위치를 하드 코딩하려는 경우 대신<code>EBClientAdPositioning</code> 개체를 전달할 수 있습니다.
/// @param tableView 광고를 삽입 할 테이블입니다.
/// @param controller 콘텐츠를로드하는 데 사용해야하는 뷰 컨트롤러입니다.
/// @param positioning 스트림에서 광고가 표시되어야하는 위치를 지정하는 위치 지정 개체입니다.
/// @param rendererConfigurations 네이티브 광고가 렌더링되는 방식을 제어하는 ​​EBNativeAdRendererConfiguration 개체의 배열입니다.
/// 지정된 광고 단위에 표시 될 수있는 모든 광고 유형을 렌더링 할 수있는 구성을 전달해야합니다.
/// @return An <code>EBTableViewAdPlacer</code> object.
+ (EBTableViewAdPlacer * _Nonnull)placerWithTableView:(UITableView * _Nullable)tableView viewController:(UIViewController * _Nullable)controller adPositioning:(EBAdPositioning * _Nullable)adPositioning rendererConfigurations:(NSArray<EBNativeAdRendererConfiguration *> * _Nullable)rendererConfigurations SWIFT_WARN_UNUSED_RESULT;
/// 지정된 광고 단위 ID를 사용하여 ExelBid 광고 서버에서 광고를 요청합니다.
/// @param adUnitID 광고 ID입니다.
- (void)loadAdsForAdUnitID:(NSString * _Nullable)adUnitID;
/// 지정된 광고 단위 ID 및 타겟팅 매개 변수를 사용하여 ExelBid 광고 서버에서 광고를 요청합니다.
/// @param adUnitID  ExelBid ad unit ID.
/// @param targeting 지리적 위치 데이터와 같은 타겟팅 정보가 포함 된 개체입니다.
- (void)loadAdsForAdUnitID:(NSString * _Nullable)adUnitID targeting:(EBNativeAdRequestTargeting * _Nullable)targeting;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UITableViewCell;

@interface EBTableViewAdPlacer (SWIFT_EXTENSION(ExelBidSDK)) <UITableViewDataSource>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)tableView:(UITableView * _Nonnull)tableView canEditRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView moveRowAtIndexPath:(NSIndexPath * _Nonnull)sourceIndexPath toIndexPath:(NSIndexPath * _Nonnull)destinationIndexPath;
@end


@interface EBTableViewAdPlacer (SWIFT_EXTENSION(ExelBidSDK))
- (void)adPlacer:(EBStreamAdPlacer * _Nonnull)adPlacer didLoadAdAtIndexPath:(NSIndexPath * _Nullable)indexPath;
- (void)adPlacer:(EBStreamAdPlacer * _Nonnull)adPlacer didRemoveAdsAtIndexPaths:(NSArray<NSIndexPath *> * _Nullable)indexPaths;
- (void)nativeAdWillLoadForStreamAdPlacer:(EBStreamAdPlacer * _Nullable)adPlacer;
- (void)nativeAdDidLoadForStreamAdPlacer:(EBStreamAdPlacer * _Nonnull)adPlacer;
- (void)nativeAdWillLeaveApplicationFromStreamAdPlacer:(EBStreamAdPlacer * _Nonnull)adPlacer;
@end


@interface EBTableViewAdPlacer (SWIFT_EXTENSION(ExelBidSDK)) <UITableViewDelegate>
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willDeselectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCellEditingStyle)tableView:(UITableView * _Nonnull)tableView editingStyleForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP10ExelBidSDK27EBTableViewAdPlacerDelegate_")
@protocol EBTableViewAdPlacerDelegate
@optional
- (void)nativeAdWillLoadForTableViewAdPlacer:(EBTableViewAdPlacer * _Nullable)placer;
- (void)nativeAdDidLoadForTableViewAdPlacer:(EBTableViewAdPlacer * _Nullable)placer;
- (void)nativeAdWillLeaveApplicationFromTableViewAdPlacer:(EBTableViewAdPlacer * _Nullable)placer;
@end


/// *<code>EBVideoAdRequest</code> 클래스는 기본 광고 ExelBid 광고 서버에 대한 개별 요청을 관리하는 데 사용됩니다.
/// *
/// <ul>
///   <li>
///     @warning <em>Note:</em> 이 클래스는 기본 광고의 응답을 수동으로 처리하려는 일회성 요청을 대상으로하고 있습니다.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10ExelBidSDK16EBVideoAdRequest")
@interface EBVideoAdRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC10ExelBidSDK14EBVideoManager")
@interface EBVideoManager : NSObject
/// 관련성이 더 높은 광고를 수신하기 위해 ExelBid 광고 서버로 전달되어야하는 키워드 세트를 나타내는 문자열입니다.
/// 키워드는 일반적으로 특정 사용자 세그먼트에서 광고 캠페인을 타겟팅하는 데 사용됩니다. 쉼표로 구분 된 키-값 쌍 형식이어야합니다 (e.g. “marital:single,age:24”).
/// ExelBid 웹 사이트의 키워드 타겟팅 옵션은 캠페인 관리시 “고급 타겟팅”섹션에서 찾을 수 있습니다.
- (void)keywords:(NSString * _Nonnull)keywords;
/// 더 관련성 높은 광고를 수신하기 위해 ExelBid 광고 서버로 전달되어야하는 사용자의 위치를 나타내는<code>CLLocation</code> 개체입니다.
- (void)location:(CLLocation * _Nonnull)location;
/// 생년 월일 (ex:2016)
- (void)yob:(NSString * _Nonnull)yob;
/// 성별 (ex: M,F)
- (void)gender:(NSString * _Nonnull)gender;
/// 광고보기가 테스트 모드에서 광고를 요청해야하는지 여부를 결정하는 Boolean 값입니다.
/// The default value is NO.
- (void)testing:(BOOL)testing;
/// Coppa (default : 0)
- (void)coppa:(NSString * _Nonnull)coppa;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)unitId OBJC_DESIGNATED_INITIALIZER;
+ (EBVideoManager * _Nonnull)initFullVideoWithIdentifier:(NSString * _Nonnull)unitId SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("이 함수는 더 이상 사용되지 않습니다. 대신 생성자 'EBVideoManager(_ identifier: String)'를 사용하세요.");
/// 광고 서버통신 성공후에 호출한다
/// @param handler
- (void)startWithCompletionHandler:(void (^ _Nullable)(EBVideoAdRequest * _Nullable, NSError * _Nullable))handler;
- (void)presentAdWithController:(UIViewController * _Nonnull)controller delegate:(id <EBVideoDelegate> _Nonnull)delegate;
- (UIViewController * _Nullable)adViewWithDelegate:(id <EBVideoDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







SWIFT_CLASS("_TtC10ExelBidSDK7ExelBid")
@interface ExelBid : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ExelBid * _Nonnull sharedInstance;)
+ (ExelBid * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(ExelBid * _Nonnull)value;
@property (nonatomic, copy) NSString * _Nonnull appId;
/// Exelbid SDK가 광고 서버를 결정하는 값입니다. 기본값은 false입니다.
/// true로 설정시 개발환경 테스트가 가능합니다.
/// 개발환경에서 테스트가 완료되면 값을 false로 설정하거나 기본값이 설정되로록 해주세요.
@property (nonatomic) BOOL testing;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10ExelBidSDK20ExelBidNativeManager")
@interface ExelBidNativeManager : NSObject
/// 관련성이 더 높은 광고를 수신하기 위해 ExelBid 광고 서버로 전달되어야하는 키워드 세트를 나타내는 문자열입니다.
/// 키워드는 일반적으로 특정 사용자 세그먼트에서 광고 캠페인을 타겟팅하는 데 사용됩니다. 쉼표로 구분 된 키-값 쌍 형식이어야합니다 (e.g. “marital:single,age:24”).
/// ExelBid 웹 사이트의 키워드 타겟팅 옵션은 캠페인 관리시 “고급 타겟팅”섹션에서 찾을 수 있습니다.
- (void)keywords:(NSString * _Nonnull)keywords;
/// 더 관련성 높은 광고를 수신하기 위해 ExelBid 광고 서버로 전달되어야하는 사용자의 위치를 나타내는<code>CLLocation</code> 개체입니다.
- (void)location:(CLLocation * _Nonnull)location;
/// 생년 월일 (ex:2016)
- (void)yob:(NSString * _Nonnull)yob;
/// 성별 (ex: M,F)
- (void)gender:(NSString * _Nonnull)gender;
/// 광고보기가 테스트 모드에서 광고를 요청해야하는지 여부를 결정하는 Boolean 값입니다.
/// The default value is NO.
- (void)testing:(BOOL)testing;
/// Coppa (default : 0)
- (void)coppa:(NSString * _Nonnull)coppa;
/// 원하는 네이티브 광고 개체의 자산에 해당하는 미리 정의 된 문자열 세트.
/// ExelBid 광고 서버는 desiredAssets의 값들만 반환합니다.
- (void)desiredAssets:(NSSet * _Nonnull)desiredAssets;
- (nonnull instancetype)init:(NSString * _Nonnull)identifier :(Class _Nullable)adViewClass OBJC_DESIGNATED_INITIALIZER;
+ (ExelBidNativeManager * _Nonnull)initNativeAdWithAdUnitIdentifier:(NSString * _Nonnull)identifier :(Class _Nullable)adViewClass SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("이 함수는 더 이상 사용되지 않습니다. 대신 생성자 'ExelBidNativeManager(_ identifier: String, _ adViewClass: AnyClass?)'를 사용하세요.");
/// ExelBid 광고 서버에 대한 요청을 실행합니다.
/// @param handler 요청이 완료 될 때 실행할 블록.
/// 블록에는 요청 자체와 유효한 EBNativeAd 또는 실패를 나타내는 NSError 개체가 매개 변수로 포함됩니다.
- (void)startWithCompletionHandler:(void (^ _Nullable)(EBNativeAdRequest * _Nullable, EBNativeAd * _Nullable, NSError * _Nullable))handler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC10ExelBidSDK15MPartnersAdView")
@interface MPartnersAdView : EBAdView
- (nonnull instancetype)initWithAdUnitId:(NSString * _Nullable)adUnitId size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10ExelBidSDK22MPartnersNativeManager")
@interface MPartnersNativeManager : NSObject
/// 관련성이 더 높은 광고를 수신하기 위해 ExelBid 광고 서버로 전달되어야하는 키워드 세트를 나타내는 문자열입니다.
/// 키워드는 일반적으로 특정 사용자 세그먼트에서 광고 캠페인을 타겟팅하는 데 사용됩니다. 쉼표로 구분 된 키-값 쌍 형식이어야합니다 (e.g. “marital:single,age:24”).
/// ExelBid 웹 사이트의 키워드 타겟팅 옵션은 캠페인 관리시 “고급 타겟팅”섹션에서 찾을 수 있습니다.
- (void)keywords:(NSString * _Nonnull)keywords;
/// 더 관련성 높은 광고를 수신하기 위해 ExelBid 광고 서버로 전달되어야하는 사용자의 위치를 나타내는<code>CLLocation</code> 개체입니다.
- (void)location:(CLLocation * _Nonnull)location;
/// 생년 월일 (ex:2016)
- (void)yob:(NSString * _Nonnull)yob;
/// 성별 (ex: M,F)
- (void)gender:(NSString * _Nonnull)gender;
/// 광고보기가 테스트 모드에서 광고를 요청해야하는지 여부를 결정하는 Boolean 값입니다.
/// The default value is NO.
- (void)testing:(BOOL)testing;
/// Coppa (default : 0)
- (void)coppa:(NSString * _Nonnull)coppa;
/// 원하는 네이티브 광고 개체의 자산에 해당하는 미리 정의 된 문자열 세트.
/// ExelBid 광고 서버는 desiredAssets의 값들만 반환합니다.
- (void)desiredAssets:(NSSet * _Nonnull)desiredAssets;
- (nonnull instancetype)init:(NSString * _Nonnull)identifier :(Class _Nullable)adViewClass OBJC_DESIGNATED_INITIALIZER;
/// ExelBid 광고 서버에 대한 요청을 실행합니다.
/// @param handler 요청이 완료 될 때 실행할 블록.
/// 블록에는 요청 자체와 유효한 EBNativeAd 또는 실패를 나타내는 NSError 개체가 매개 변수로 포함됩니다.
- (void)startWithCompletionHandler:(void (^ _Nullable)(EBNativeAdRequest * _Nullable, EBNativeAd * _Nullable, NSError * _Nullable))handler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class UICollectionViewLayoutAttributes;

@interface UICollectionView (SWIFT_EXTENSION(ExelBidSDK))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull kAdPlacerKey;)
+ (NSString * _Nonnull)kAdPlacerKey SWIFT_WARN_UNUSED_RESULT;
+ (void)setKAdPlacerKey:(NSString * _Nonnull)value;
- (void)EB_setAdPlacer:(EBCollectionViewAdPlacer * _Nonnull)placer;
@property (nonatomic, readonly, strong) EBCollectionViewAdPlacer * _Nullable EB_adPlacer;
- (void)EB_setDelegate:(id <UICollectionViewDelegate> _Nonnull)delegate;
@property (nonatomic, readonly, strong) id <UICollectionViewDelegate> _Nullable EB_delegate;
- (void)EB_setDataSource:(id <UICollectionViewDataSource> _Nonnull)dataSource;
@property (nonatomic, readonly, strong) id <UICollectionViewDataSource> _Nullable EB_dataSource;
- (UICollectionViewCell * _Nullable)EB_dequeueReusableCellWithIdentifier:(NSString * _Nonnull)identifier forIndexPath:(NSIndexPath * _Nullable)indexPath SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSArray<NSIndexPath *> * _Nullable EB_indexPathsForSelectedItems;
- (void)EB_selectItemAtIndexPath:(NSIndexPath * _Nullable)indexPath animated:(BOOL)animated scrollPosition:(UICollectionViewScrollPosition)scrollPosition;
- (void)EB_deselectItemAtIndexPath:(NSIndexPath * _Nullable)indexPath animated:(BOOL)animated;
- (void)EB_reloadData;
- (UICollectionViewLayoutAttributes * _Nullable)EB_layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSIndexPath * _Nullable)EB_indexPathForItemAtPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
- (NSIndexPath * _Nullable)EB_indexPathForCell:(UICollectionViewCell * _Nonnull)cell SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nullable)EB_cellForItemAtIndexPath:(NSIndexPath * _Nullable)indexPath SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSArray<UICollectionViewCell *> * _Nonnull EB_visibleCells;
@property (nonatomic, readonly, copy) NSArray<NSIndexPath *> * _Nullable EB_indexPathsForVisibleItems;
- (void)EB_scrollToItemAtIndexPath:(NSIndexPath * _Nullable)indexPath atScrollPosition:(UICollectionViewScrollPosition)scrollPosition animated:(BOOL)animated;
- (void)EB_insertSections:(NSIndexSet * _Nonnull)sections;
- (void)EB_deleteSections:(NSIndexSet * _Nonnull)sections;
- (void)EB_reloadSections:(NSIndexSet * _Nonnull)sections;
- (void)EB_moveSection:(NSInteger)section toSection:(NSInteger)newSection;
- (void)EB_insertItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nullable)indexPaths;
- (void)EB_deleteItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nullable)indexPaths;
- (void)EB_reloadItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nullable)indexPaths;
- (void)EB_moveItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath toIndexPath:(NSIndexPath * _Nonnull)newIndexPath;
@end




@interface UITableView (SWIFT_EXTENSION(ExelBidSDK))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull kAdPlacerKey;)
+ (NSString * _Nonnull)kAdPlacerKey SWIFT_WARN_UNUSED_RESULT;
+ (void)setKAdPlacerKey:(NSString * _Nonnull)value;
- (void)EB_setAdPlacer:(EBTableViewAdPlacer * _Nonnull)placer;
/// 현재 사용중인 광고 게재 위치를 반환합니다.
/// @return 광고 배치 객체 또는 광고 배치 장치가 사용되지 않는 경우<code>nil</code>.
@property (nonatomic, readonly, strong) EBTableViewAdPlacer * _Nullable EB_adPlacer;
/// 테이블의 데이터 소스를 설정합니다.
/// 애플리케이션이 해당 테이블를 사용하여 광고 배치자를 인스턴스화 한 후
/// 테이블의 데이터 소스를 변경해야하는 경우-[UITableView setDataSource :] 대신이 메소드를 사용하십시오.
/// @param dataSource 새로운 테이블 뷰 데이터 소스.
- (void)EB_setDataSource:(id <UITableViewDataSource> _Nonnull)dataSource;
/// 테이블 데이터 소스를 반환합니다.
/// 테이블를 사용하여 광고 배치를 인스턴스화하면 광고 배치가 테이블의 원래 데이터 소스 개체를 대체합니다.
/// 애플리케이션이 원래 데이터 소스에 액세스해야하는 경우-[UITableView dataSource] 대신이 메소드를 사용하십시오.
/// @return 데이터 소스
@property (nonatomic, readonly, strong) id <UITableViewDataSource> _Nullable EB_dataSource;
/// 테이블 뷰의 델리게이트를 설정합니다.
/// 애플리케이션이 해당 테이블를 사용하여 광고 배치자를 인스턴스화 한 후 테이블의 대리자를 변경해야하는
/// 경우-[UITableView setDelegate :] 대신이 메소드를 사용하십시오.
/// @param 새로운 테이블 뷰 델리게이트.
- (void)EB_setDelegate:(id <UITableViewDelegate> _Nonnull)delegate;
/// 테이블 뷰의 원래 대리자를 반환합니다.
/// 테이블를 사용하여 광고 배치기를 인스턴스화하면 광고 배치가 테이블의 원래 대리자 개체를 대체합니다.
/// 응용 프로그램이 원래 대리자에 액세스해야하는 경우-[UITableView delegate] 대신이 메서드를 사용합니다.
/// @return 원래 테이블 뷰 델리게이트.
@property (nonatomic, readonly, strong) id <UITableViewDelegate> _Nullable EB_delegate;
/// @name 테이블 광고 배치 자에게 콘텐츠 변경 알림
/// 테이블의 행과 섹션을 삽입, 삭제 또는 선택하는 일련의 메서드 호출을 시작합니다.
- (void)EB_beginUpdates;
/// 테이블의 행과 섹션을 삽입, 삭제, 선택 또는 다시로드하는 일련의 메소드 호출을 완료하십시오.
- (void)EB_endUpdates;
/// 테이블의 행과 섹션을 다시로드합니다.
- (void)EB_reloadData;
/// 인덱스 경로 배열로 식별되는 위치에 수신자의 행을 삽입하고 첨부 된 광고 배치 자에게 삽입을 알립니다.
/// @param indexPaths 테이블에 삽입 할 행을 나타내는<code>NSIndexPath</code> 객체의 배열입니다.
/// @param animation  셀을 삽입 할 때 수행 할 애니메이션의 종류를 지정하거나 애니메이션을 요청하지 않는 상수입니다.
- (void)EB_insertRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nullable)indexPaths withRowAnimation:(enum UITableViewRowAnimation)animation;
/// 인덱스 경로 배열로 식별되는 위치에서 수신자의 행을 삭제하고 연결된 광고 배치 자에게 삭제를 알립니다.
/// @param indexPaths 삭제할 행을 식별하는<code>NSIndexPath</code> 객체의 배열입니다.
/// @param animation  셀을 삭제할 때 수행 할 애니메이션의 종류를 지정하거나 애니메이션을 요청하지 않는 상수입니다.
- (void)EB_deleteRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nullable)indexPaths withRowAnimation:(enum UITableViewRowAnimation)animation;
/// 지정된 애니메이션 효과를 사용하여 지정된 행을 다시로드하고 행 위치가 변경되었을 수 있음을 연결된 광고 배치 자에게 알립니다.
/// @param indexPaths 다시로드 할 행을 식별하는<code>NSIndexPath</code> 개체의 배열입니다.
/// @param animation  다시로드하는 방법을 애니메이션으로 표시하는 상수입니다.
- (void)EB_reloadRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nullable)indexPaths withRowAnimation:(enum UITableViewRowAnimation)animation;
/// 광고 배치자가 삽입 한 광고를 고려하여 지정된 위치의 행을 대상 위치로 이동합니다.
/// @param indexPath   이동할 행을 식별하는 인덱스 경로입니다.
/// @param newIndexPath * indexPath *에서 행의 목적지 인 행을 식별하는 색인 경로.
- (void)EB_moveRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath toIndexPath:(NSIndexPath * _Nonnull)newIndexPath;
/// 수신기에 하나 이상의 섹션을 삽입하고 첨부 된 광고 배치 자에게 삽입을 알립니다.
/// @param sections  섹션 수신 테이블 뷰에 삽입 할 섹션을 지정하는 인덱스 집합입니다.
/// 지정된 인덱스 위치에 섹션이 이미있는 경우 한 인덱스 위치 아래로 이동합니다.
/// @param animation 삽입이 애니메이션되는 방법을 나타내는 상수입니다.
- (void)EB_insertSections:(NSIndexSet * _Nonnull)sections withRowAnimation:(enum UITableViewRowAnimation)animation;
/// 수신자에서 하나 이상의 섹션을 삭제하고 첨부 된 광고 배치 자에게 삭제를 알립니다.
/// @param sections  섹션 수신 테이블 뷰에서 삭제할 섹션을 지정하는 인덱스 세트입니다. 지정된 인덱스 위치 뒤에 섹션이 있으면 한 인덱스 위치 위로 이동합니다.
/// @param animation 섹션을 삭제할 때 수행 할 애니메이션의 종류를 지정하거나 애니메이션을 요청하지 않는 상수입니다.
- (void)EB_deleteSections:(NSIndexSet * _Nonnull)sections withRowAnimation:(enum UITableViewRowAnimation)animation;
/// 지정된 섹션을 새로 고침하고 섹션이 변경되었을 수 있음을 첨부 된 광고 배치 자에게 알립니다.
/// @param sections 섹션 다시로드 할 섹션을 식별하는 인덱스 집합입니다.
/// @param animation 다시로드하는 방법을 애니메이션으로 표시하는 상수입니다.
- (void)EB_reloadSections:(NSIndexSet * _Nonnull)sections withRowAnimation:(enum UITableViewRowAnimation)animation;
/// 테이블에서 섹션을 새 위치로 이동하고 첨부 된 광고 배치 자에게 알립니다.
/// @param section    섹션 이동할 섹션의 색인입니다.
/// @param newSection 섹션의 이동 대상인 테이블의 인덱스입니다. 해당 위치의 기존 섹션은 인접한 인덱스 위치로 위아래로 슬라이드하여 공간을 만듭니다.
- (void)EB_moveSection:(NSInteger)section toSection:(NSInteger)newSection;
/// 지정된 인덱스 경로에있는 테이블 뷰 셀을 반환합니다.
/// @param indexPath 테이블 뷰에서 행을 찾는 인덱스 경로
/// @return 테이블의 셀을 나타내는 객체 또는 셀이 보이지 않거나 * indexPath *가 범위를 벗어난 경우<code>nil</code>.
- (UITableViewCell * _Nullable)EB_cellForRowAtIndexPath:(NSIndexPath * _Nullable)indexPath SWIFT_WARN_UNUSED_RESULT;
/// 지정된 재사용 식별자에 대해 재사용 가능한 테이블 뷰 셀 객체를 반환합니다.
/// @param identifier 재사용 할 셀 객체를 식별하는 문자열입니다. 이 매개 변수는 ‘nil’이 아니어야합니다.
/// @param indexPath  셀의 위치를 지정하는 인덱스 경로. 데이터 소스는 셀을 요청할 때이 정보를 수신하고이를 전달해야합니다.
/// @return 연관된 재사용 식별자가있는<code>UITableViewCell</code> 객체.
- (UITableViewCell * _Nullable)EB_dequeueReusableCellWithIdentifier:(NSString * _Nonnull)identifier forIndexPath:(NSIndexPath * _Nullable)indexPath SWIFT_WARN_UNUSED_RESULT;
/// 선택 취소 애니메이션 옵션을 사용하여 인덱스 경로로 식별되는 지정된 행을 선택 취소합니다.
/// @param indexPath 수신자의 행을 식별하는 색인 경로.
/// @param animated  YES (선택 취소 애니메이션을 적용하려면 YES, 변경이 즉시 적용되어야하는 경우 NO).
- (void)EB_deselectRowAtIndexPath:(NSIndexPath * _Nullable)indexPath animated:(BOOL)animated;
/// 광고가 삽입되기 전에 계산 된 주어진 표보기 셀의 원래 행과 섹션을 나타내는 색인 경로를 반환합니다.
/// @param cell 테이블의 셀 개체입니다.
/// @return 셀의 행과 섹션을 나타내는 색인 경로 또는 색인 경로가 유효하지 않거나 광고가 포함 된 셀에 대한 참조 인 경우 ‘nil’입니다.
- (NSIndexPath * _Nullable)EB_indexPathForCell:(UITableViewCell * _Nonnull)cell SWIFT_WARN_UNUSED_RESULT;
/// 주어진 지점에서 원래 행과 섹션을 나타내는 인덱스 경로를 반환합니다.
/// @param point 수신자의 로컬 좌표계에있는 지점 (테이블의 경계).
/// @return 포인트가 행의 경계를 벗어나거나 광고가 포함 된 셀과 연결된 경우 * point * 또는`nil ’과 연결된 행 및 섹션을 나타내는 색인 경로입니다.
- (NSIndexPath * _Nullable)EB_indexPathForRowAtPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// 광고가 삽입되지 않은 것처럼 선택한 행의 원래 색인 경로를 반환합니다.
/// @return 선택한 행의 원래 인덱스 경로입니다.
@property (nonatomic, readonly, copy) NSIndexPath * _Nullable EB_indexPathForSelectedRow;
/// 광고가 삽입되기 전에 계산 된 지정된 직사각형으로 묶인 광고가 아닌 행을 각각 나타내는 색인 경로의 배열을 반환합니다.
/// @param rect 테이블 뷰의 영역을 로컬 좌표로 정의하는 사각형입니다.
/// @return * rect * 내의 행을 식별하는 행 및 섹션 인덱스를 각각 나타내는<code>NSIndexPath</code> 객체의 배열입니다. 광고를 나타내는 색인 경로는 반환되지 않습니다.
- (NSArray<NSIndexPath *> * _Nullable)EB_indexPathsForRowsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// 광고가 삽입되지 않은 것처럼 선택한 행에 대한 원래 색인 경로의 배열을 반환합니다.
/// @return 선택한 행에 대한 원래 인덱스 경로의 배열입니다.
@property (nonatomic, readonly, copy) NSArray<NSIndexPath *> * _Nullable EB_indexPathsForSelectedRows;
/// 광고가 삽입되기 전에 계산 된 표보기에서 광고가 아닌 행을 식별하는 색인 경로 배열을 반환합니다.
/// @return 테이블에서 광고가 아닌 행을 각각 나타내는<code>NSIndexPath</code> 개체의 배열입니다. 행이 표시되지 않으면 ‘nil’을 반환합니다.
@property (nonatomic, readonly, copy) NSArray<NSIndexPath *> * _Nullable EB_indexPathsForVisibleRows;
/// 테이블에서 지정된 위치에 가장 가까운 선택된 행이 해당 위치에 있도록 테이블를 스크롤합니다.
/// @param indexPath     테이블 뷰에서 행 인덱스와 섹션 인덱스로 행을 식별하는 인덱스 경로입니다.
/// @param scrollPosition 스크롤이 끝날 때 행에 대한 수신 테이블 (상단, 중간, 하단)에서 상대 위치를 식별하는 상수입니다.
/// @param animated      YES는 위치 변경을 애니메이션화하려면 YES, 즉각적인 경우 NO.
- (void)EB_scrollToRowAtIndexPath:(NSIndexPath * _Nullable)indexPath atScrollPosition:(enum UITableViewScrollPosition)scrollPosition animated:(BOOL)animated;
/// 인덱스 경로로 식별되는 수신자에서 행을 선택하고 선택적으로 행을 수신자의 위치로 스크롤합니다.
/// @param indexPath     수신자의 행을 식별하는 색인 경로.
/// @param animated     YES (선택 항목 및 위치 변경 사항에 애니메이션 효과를 적용하려는 경우), 변경 사항이 즉시 적용되어야하는 경우 NO.
/// @param scrollPosition  스크롤이 끝날 때 행에 대한 수신 테이블(상단, 중간, 하단)에서 상대 위치를 식별하는 상수입니다.
- (void)EB_selectRowAtIndexPath:(NSIndexPath * _Nullable)indexPath animated:(BOOL)animated scrollPosition:(enum UITableViewScrollPosition)scrollPosition;
/// 표보기에 표시되는 광고가 아닌 셀의 배열을 반환합니다.
/// @return <code>UITableViewCell</code> 개체를 포함하는 배열로, 각각 수신 테이블에서 표시되는 광고가 아닌 셀을 나타냅니다.
@property (nonatomic, readonly, copy) NSArray<UITableViewCell *> * _Nonnull EB_visibleCells;
@end




#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
